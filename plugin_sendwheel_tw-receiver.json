[
    {
        "text": "{\n    \"tiddlers\": {\n        \"$:/plugins/sendwheel/tw-receiver/tw-receiver-handler.js\": {\n            \"created\": \"20180905150947484\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/sendwheel/tw-receiver/tw-receiver-handler.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving wiki via POST to server storage\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// helper function returns a sha256 hex digest using the sjcl lib\\nvar getSHA256 = function(data) {\\n\\tvar sjcl = $tw.node ? (global.sjcl || require(\\\"./sjcl.js\\\")) : window.sjcl;\\n\\treturn sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(data))\\n}\\n\\n/*\\nCreate a saver module\\n*/\\nvar ReceiverSaver = function(wiki) {\\n};\\n\\nReceiverSaver.prototype.save = function(text,method,callback) {\\n\\t\\n\\t// if this module is not enabled by the user return false so that saver-handler can move on to next option\\n\\t// we do this here, instead of in canSave(), so that the saver can be enabled/disabled without a page refresh\\n\\tif(($tw.wiki.getTextReference(\\\"$:/tw-receiver-enabled\\\") || \\\"\\\").toLowerCase() !== \\\"yes\\\") {\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\t// retrieve parameters from the ui form\\n\\t//var isEnabled = $tw.wiki.getTextReference(\\\"$:/tw-receiver-enabled\\\");\\n\\tvar seckey = $tw.utils.getPassword(\\\"tw-receiver-seckey\\\"); //reminder: this util uses html5.localStorage (secvio)\\n\\tvar wikiname = $tw.wiki.getTextReference(\\\"$:/tw-receiver-wikiname\\\");\\n\\tvar serverurl = $tw.wiki.getTextReference(\\\"$:/tw-receiver-serverurl\\\");\\n\\tvar cdauthentication = true; //challenge digest auth\\n\\tvar signdata = true; //integrity check\\n\\tvar stalecheck = false; //overwrite stale instance check \\n\\t\\n\\t// enable/disable based on ui setting\\n\\tif($tw.wiki.getTextReference(\\\"$:/tw-receiver-stalecheck\\\") == \\\"yes\\\") {\\n\\t\\tstalecheck = true;\\n\\t}\\n\\t\\n\\tif($tw.wiki.getTextReference(\\\"$:/tw-receiver-signdata\\\") == \\\"no\\\") {\\n\\t\\tsigndata = false;\\n\\t}\\n\\t\\n\\t// if we're not provided a filename, try to get the name of the wiki from the URL\\n\\tif(!wikiname) {\\n\\t\\tvar p = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\t// We decode the pathname because document.location is URL encoded by the browser\\n\\t\\t\\twikiname = decodeURIComponent(document.location.pathname.substr(p+1));\\n\\t\\t}\\n\\t}\\n\\t\\n\\tif(!wikiname) {\\n\\t\\twikiname = \\\"tiddlywiki.html\\\";\\n\\t}\\n\\t\\n\\t// construct the server url if not provided\\n\\tif(!serverurl) {\\n\\t\\tserverurl = \\\"tw-receiver-server.php\\\";\\n\\t}\\n\\t\\n\\t// fail to save if we're missing any critical parameters\\n\\tif(\\n\\t\\t!seckey || seckey.toString().trim() === \\\"\\\" ||\\n\\t\\t!wikiname || wikiname.toString().trim() === \\\"\\\" ||\\n\\t\\t!serverurl || serverurl.toString().trim() === \\\"\\\" \\n\\t){\\n\\t\\treturn callback(\\\"TW Receiver: \\\\n Missing some user input parameters. Save Failed\\\");\\n\\t\\t// we don't return false because we want the user to fix the problem or disable this module\\n\\t\\t//return false;\\n\\t}\\n\\t\\n\\t// everything seems in order, lets attempt the save\\n\\t// display the save starting notification\\n\\t$tw.notifier.display(\\\"$:/language/Notifications/Save/Starting\\\");\\n\\t\\n\\t// helper function returns a sha256 hex digest using the sjcl lib\\n\\tvar getSHA256 = function(data) {\\n\\t\\tvar sjcl = $tw.node ? (global.sjcl || require(\\\"./sjcl.js\\\")) : window.sjcl;\\n\\t\\treturn sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(data))\\n\\t}\\n\\t\\n\\t// helper function encapsulates the actual data post\\n\\t// modified version of the upload.js saver from TiddlyWiki core\\n\\tvar postToServer = function(){\\n\\t\\t// text,seckey,filename,serverurl\\n\\t\\tvar retResp = false;\\n\\t\\t// assemble the header\\n\\t\\tvar boundary = \\\"-------\\\" + \\\"81fd830c85363675edb98d2879916d8c\\\";\\t\\n\\t\\tvar header = [];\\n\\t\\theader.push(\\\"--\\\" + boundary + \\\"\\\\r\\\\nContent-disposition: form-data; name=\\\\\\\"twreceiverparams\\\\\\\"\\\\r\\\\n\\\");\\n\\t\\theader.push(\\\"seckey=\\\" + seckey + \\\"&wikiname=\\\" + wikiname + \\\"&datasig=\\\" + datasig + \\\"&stalehash=\\\" + stalehash); \\n\\t\\theader.push(\\\"\\\\r\\\\n\\\" + \\\"--\\\" + boundary);\\n\\t\\theader.push(\\\"Content-disposition: form-data; name=\\\\\\\"userfile\\\\\\\"; filename=\\\\\\\"\\\" + wikiname + \\\"\\\\\\\"\\\");\\n\\t\\theader.push(\\\"Content-Type: text/html;charset=UTF-8\\\");\\n\\t\\theader.push(\\\"Content-Length: \\\" + text.length + \\\"\\\\r\\\\n\\\");\\n\\t\\theader.push(\\\"\\\");\\n\\t\\t// assemble the tail and the data itself\\n\\t\\tvar tail = \\\"\\\\r\\\\n--\\\" + boundary + \\\"--\\\\r\\\\n\\\";\\n\\t\\tvar\\tdata = header.join(\\\"\\\\r\\\\n\\\") + text + tail;\\n\\t\\t// do the HTTP post\\n\\t\\tvar http = new XMLHttpRequest();\\n\\t\\thttp.open(\\\"POST\\\",serverurl,true);\\n\\t\\thttp.setRequestHeader(\\\"Content-Type\\\",\\\"multipart/form-data; charset=UTF-8; boundary=\\\" + boundary);\\n\\t\\thttp.onreadystatechange = function() {\\n\\t\\t\\tif(http.readyState == 4 && http.status == 200) {\\n\\t\\t\\t\\tif(http.responseText.substr(0,8) === \\\"000 - ok\\\") {\\n\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t\\tif(stalecheck) {\\n\\t\\t\\t\\t\\t\\t// update stale hash to current\\n\\t\\t\\t\\t\\t\\t$tw.wiki.setTextReference('$:/temp/tw-receiver-stalehash',getSHA256(text));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcallback(\\\"Error:\\\\n\\\" + http.responseText);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttry {\\n\\t\\t\\thttp.send(data);\\n\\t\\t} catch(ex) {\\n\\t\\t\\treturn callback($tw.language.getString(\\\"Error/Caption\\\") + \\\":\\\" + ex);\\n\\t\\t}\\n\\t};\\n\\t\\n\\t// if signdata is enabled, create a data integrity signature\\n\\tvar datasig = \\\"\\\";\\n\\tif(signdata){\\n\\t\\tdatasig = getSHA256(text+seckey);\\n\\t}\\n\\t\\n\\t// if stalecheck is enabled, grab the stale hash. Otherwise set to 0 for disabled\\n\\t// send this to the server for comparison\\n\\tvar stalehash = \\\"0\\\";\\n\\tif(stalecheck){\\n\\t\\tstalehash = $tw.wiki.getTextReference(\\\"$:/temp/tw-receiver-stalehash\\\");\\n\\t}\\n\\t\\n\\t// cdauthentication mode check\\n\\tif(cdauthentication) {\\n\\t\\tvar xhrequest = new XMLHttpRequest();\\n\\t\\txhrequest.onreadystatechange = function() {\\n\\t\\t\\tif(xhrequest.readyState == 4 && xhrequest.status == 200) {\\n\\t\\t\\t\\tvar challengetoken = xhrequest.responseText;\\n\\t\\t\\t\\tseckey = getSHA256(seckey + challengetoken);\\n\\t\\t\\t\\t// post helper\\n\\t\\t\\t\\tpostToServer();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\txhrequest.open(\\\"GET\\\", serverurl + \\\"?md=gct\\\", true);\\n\\t\\ttry {\\n\\t\\t\\txhrequest.send(null);\\n\\t\\t} catch(ex) {\\n\\t\\t\\treturn callback($tw.language.getString(\\\"Error/Caption\\\") + \\\":\\\" + ex);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\t// post helper\\n\\t\\tpostToServer();\\n\\t}\\n\\t\\n\\t// we return true because the attempt was completed\\n\\t// either saved success or error reported via callback()\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nReceiverSaver.prototype.info = {\\n\\tname: \\\"tw-receiver\\\",\\n\\tpriority: 3000, // priority: higher # is first\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\nCalled onload (wiki start) to enable this saver, requires refresh to change\\n*/\\nexports.canSave = function(wiki) {\\n\\t// stale check calculation\\n\\t// we call this here because we want the value at startup\\n\\tvar data = wiki.wiki.renderTiddler(\\\"text/plain\\\",\\\"$:/core/save/all\\\"); \\n\\t$tw.wiki.setTextReference('$:/temp/tw-receiver-stalehash',getSHA256(data));\\n\\t\\n\\t// return true regardless\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new ReceiverSaver(wiki);\\n};\\n\\n})();\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/sendwheel/tw-receiver/tw-receiver-handler.js\",\n            \"tags\": \"\",\n            \"module-type\": \"saver\",\n            \"modified\": \"20181012151713710\"\n        },\n        \"$:/plugins/sendwheel/tw-receiver/tw-receiver-ui\": {\n            \"created\": \"20180905150506405\",\n            \"text\": \"TW Receiver uploads this wiki to a web server, saving the current state\\n<div style=\\\"width:160px;\\\">\\n\\n|''Enable'' |<$checkbox tiddler=\\\"$:/tw-receiver-enabled\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/> |\\n\\n</div>\\n<div style=\\\"width:60%\\\">\\n\\n|Secret Key |<$password name=\\\"tw-receiver-seckey\\\"/> |\\n|Server&nbsp;URL  |<$edit-text tiddler=\\\"$:/tw-receiver-serverurl\\\" default=\\\"tw-receiver-server.php\\\" tag=\\\"input\\\"/> |\\n|Filename |<$edit-text tiddler=\\\"$:/tw-receiver-wikiname\\\" default=\\\"wiki.html\\\" tag=\\\"input\\\"/> |\\n\\n</div>\\n\\n<div style=\\\"width:60%\\\">\\n<fieldset>\\n    <legend>Options:</legend>\\n\\n<$checkbox tiddler=\\\"$:/tw-receiver-stalecheck\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/> Stale Overwrite Protection <br />\\n<$checkbox tiddler=\\\"$:/tw-receiver-signdata\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/> Signed Data Integrity <br />\\n<$checkbox tiddler=\\\"$:/tw-receiver-cdauthentication\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"/> Challenge Digest Authentication <br />\\n\\n</fieldset>\\n</div>\\n\\n\\\"\\\"\\\"\\n\\n''Tips:''\\n- There is no secure way to transmit information over an HTTP connection. Anything transmitted this way is observable and can be manipulated. It is worthwhile to use an HTTPS (TLS) connection to the server.\\n- Typically the tw-receiver-server.php file is in the same directory as the wiki html file. In that case the default \\\"Server URL: tw-receiver-server.php\\\" can be used.\\n\\\"\\\"\\\"\",\n            \"title\": \"$:/plugins/sendwheel/tw-receiver/tw-receiver-ui\",\n            \"tags\": \"$:/tags/ControlPanel/Saving\",\n            \"modified\": \"20181012151618024\",\n            \"caption\": \"TW Receiver\"\n        }\n    }\n}",
        "version": "0.0.5",
        "type": "application/json",
        "title": "$:/plugins/sendwheel/tw-receiver",
        "tags": "",
        "plugin-type": "plugin",
        "name": "",
        "modified": "20181001174553864",
        "description": "Saver plugin for PHP servers",
        "dependents": "",
        "created": "20180905145631664",
        "author": "sendwheel"
    }
]